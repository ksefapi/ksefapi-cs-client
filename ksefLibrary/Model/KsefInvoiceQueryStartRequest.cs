/*
 * KSeF API
 *
 * API do systemu KSeF
 *
 * The version of the OpenAPI document: 1.2.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = KsefApi.Client.FileParameter;
using OpenAPIDateConverter = KsefApi.Client.OpenAPIDateConverter;

namespace KsefApi.Model
{
    /// <summary>
    /// KsefInvoiceQueryStartRequest
    /// </summary>
    [DataContract(Name = "KsefInvoiceQueryStartRequest")]
    public partial class KsefInvoiceQueryStartRequest
    {
        /// <summary>
        /// Defines SubjectType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SubjectTypeEnum
        {
            /// <summary>
            /// Enum Subject1 for value: subject1
            /// </summary>
            [EnumMember(Value = "subject1")]
            Subject1 = 1,

            /// <summary>
            /// Enum Subject2 for value: subject2
            /// </summary>
            [EnumMember(Value = "subject2")]
            Subject2 = 2,

            /// <summary>
            /// Enum Subject3 for value: subject3
            /// </summary>
            [EnumMember(Value = "subject3")]
            Subject3 = 3,

            /// <summary>
            /// Enum SubjectAuthorized for value: subjectAuthorized
            /// </summary>
            [EnumMember(Value = "subjectAuthorized")]
            SubjectAuthorized = 4
        }


        /// <summary>
        /// Gets or Sets SubjectType
        /// </summary>
        [DataMember(Name = "subjectType", IsRequired = true, EmitDefaultValue = true)]
        public SubjectTypeEnum SubjectType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KsefInvoiceQueryStartRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KsefInvoiceQueryStartRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KsefInvoiceQueryStartRequest" /> class.
        /// </summary>
        /// <param name="sessionId">sessionId (required).</param>
        /// <param name="subjectType">subjectType (required).</param>
        /// <param name="range">range.</param>
        public KsefInvoiceQueryStartRequest(string sessionId = default, SubjectTypeEnum subjectType = default, KsefInvoiceQueryStartRange range = default)
        {
            // to ensure "sessionId" is required (not null)
            if (sessionId == null)
            {
                throw new ArgumentNullException("sessionId is a required property for KsefInvoiceQueryStartRequest and cannot be null");
            }
            this.SessionId = sessionId;
            this.SubjectType = subjectType;
            this.Range = range;
        }

        /// <summary>
        /// Gets or Sets SessionId
        /// </summary>
        [DataMember(Name = "sessionId", IsRequired = true, EmitDefaultValue = true)]
        public string SessionId { get; set; }

        /// <summary>
        /// Gets or Sets Range
        /// </summary>
        [DataMember(Name = "range", EmitDefaultValue = false)]
        public KsefInvoiceQueryStartRange Range { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KsefInvoiceQueryStartRequest {\n");
            sb.Append("  SessionId: ").Append(SessionId).Append("\n");
            sb.Append("  SubjectType: ").Append(SubjectType).Append("\n");
            sb.Append("  Range: ").Append(Range).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
