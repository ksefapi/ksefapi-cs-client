/*
 * KSeF API
 *
 * API do systemu KSeF
 *
 * The version of the OpenAPI document: 1.2.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = KsefApi.Client.FileParameter;
using OpenAPIDateConverter = KsefApi.Client.OpenAPIDateConverter;

namespace KsefApi.Model
{
    /// <summary>
    /// MgmtUser
    /// </summary>
    [DataContract(Name = "MgmtUser")]
    public partial class MgmtUser
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MgmtUser" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MgmtUser() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MgmtUser" /> class.
        /// </summary>
        /// <param name="login">login (required).</param>
        /// <param name="passwordHash">passwordHash (required).</param>
        /// <param name="manager">manager.</param>
        /// <param name="statusId">statusId.</param>
        /// <param name="clients">clients (required).</param>
        public MgmtUser(string login = default, string passwordHash = default, bool manager = default, int statusId = default, List<MgmtUserClient> clients = default)
        {
            // to ensure "login" is required (not null)
            if (login == null)
            {
                throw new ArgumentNullException("login is a required property for MgmtUser and cannot be null");
            }
            this.Login = login;
            // to ensure "passwordHash" is required (not null)
            if (passwordHash == null)
            {
                throw new ArgumentNullException("passwordHash is a required property for MgmtUser and cannot be null");
            }
            this.PasswordHash = passwordHash;
            // to ensure "clients" is required (not null)
            if (clients == null)
            {
                throw new ArgumentNullException("clients is a required property for MgmtUser and cannot be null");
            }
            this.Clients = clients;
            this.Manager = manager;
            this.StatusId = statusId;
        }

        /// <summary>
        /// Gets or Sets Login
        /// </summary>
        [DataMember(Name = "login", IsRequired = true, EmitDefaultValue = true)]
        public string Login { get; set; }

        /// <summary>
        /// Gets or Sets PasswordHash
        /// </summary>
        [DataMember(Name = "passwordHash", IsRequired = true, EmitDefaultValue = true)]
        public string PasswordHash { get; set; }

        /// <summary>
        /// Gets or Sets Manager
        /// </summary>
        [DataMember(Name = "manager", EmitDefaultValue = true)]
        public bool Manager { get; set; }

        /// <summary>
        /// Gets or Sets StatusId
        /// </summary>
        [DataMember(Name = "statusId", EmitDefaultValue = false)]
        public int StatusId { get; set; }

        /// <summary>
        /// Gets or Sets Clients
        /// </summary>
        [DataMember(Name = "clients", IsRequired = true, EmitDefaultValue = true)]
        public List<MgmtUserClient> Clients { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MgmtUser {\n");
            sb.Append("  Login: ").Append(Login).Append("\n");
            sb.Append("  PasswordHash: ").Append(PasswordHash).Append("\n");
            sb.Append("  Manager: ").Append(Manager).Append("\n");
            sb.Append("  StatusId: ").Append(StatusId).Append("\n");
            sb.Append("  Clients: ").Append(Clients).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
