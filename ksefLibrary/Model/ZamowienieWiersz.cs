/*
 * KSeF API
 *
 * API do systemu KSeF
 *
 * The version of the OpenAPI document: 1.2.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = KsefApi.Client.FileParameter;
using OpenAPIDateConverter = KsefApi.Client.OpenAPIDateConverter;

namespace KsefApi.Model
{
    /// <summary>
    /// Szczegółowe pozycje zamówienia lub umowy w walucie, w której wystawiono fakturę zaliczkową
    /// </summary>
    [DataContract(Name = "ZamowienieWiersz")]
    public partial class ZamowienieWiersz
    {

        /// <summary>
        /// Gets or Sets P12Z
        /// </summary>
        [DataMember(Name = "P_12Z", EmitDefaultValue = false)]
        public TStawkaPodatku? P12Z { get; set; }

        /// <summary>
        /// Gets or Sets GTUZ
        /// </summary>
        [DataMember(Name = "GTUZ", EmitDefaultValue = false)]
        public TGTU? GTUZ { get; set; }

        /// <summary>
        /// Gets or Sets ProceduraZ
        /// </summary>
        [DataMember(Name = "ProceduraZ", EmitDefaultValue = false)]
        public TOznaczenieProceduryZ? ProceduraZ { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ZamowienieWiersz" /> class.
        /// </summary>
        /// <param name="nrWierszaZam">Liczby naturalne większe od zera.</param>
        /// <param name="uUIDZ">Typ znakowy ograniczony do 50 znaków.</param>
        /// <param name="p7Z">Typ znakowy ograniczony do 256 znaków.</param>
        /// <param name="indeksZ">Typ znakowy ograniczony do 50 znaków.</param>
        /// <param name="gTINZ">Typ znakowy ograniczony do 20 znaków.</param>
        /// <param name="pKWiUZ">Typ znakowy ograniczony do 50 znaków.</param>
        /// <param name="cNZ">Typ znakowy ograniczony do 50 znaków.</param>
        /// <param name="pKOBZ">Typ znakowy ograniczony do 50 znaków.</param>
        /// <param name="p8AZ">Typ znakowy ograniczony do 256 znaków.</param>
        /// <param name="p8BZ">Typ wykorzystywany do określenia ilości. Wartość numeryczna 22 znaki max, w tym 6 po przecinku.</param>
        /// <param name="p9AZ">Wartość numeryczna 22 znaki max, w tym 8 znaków po przecinku.</param>
        /// <param name="p11NettoZ">Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku.</param>
        /// <param name="p11VatZ">Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku.</param>
        /// <param name="p12Z">p12Z.</param>
        /// <param name="p12ZXII">Wartość procentowa z dokładnością do 6 miejsc po przecinku.</param>
        /// <param name="p12ZZal15">Pojedyncze pole wyboru.</param>
        /// <param name="gTUZ">gTUZ.</param>
        /// <param name="proceduraZ">proceduraZ.</param>
        /// <param name="kwotaAkcyzyZ">Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku.</param>
        /// <param name="stanPrzedZ">Pojedyncze pole wyboru.</param>
        public ZamowienieWiersz(int nrWierszaZam = default, string uUIDZ = default, string p7Z = default, string indeksZ = default, string gTINZ = default, string pKWiUZ = default, string cNZ = default, string pKOBZ = default, string p8AZ = default, double p8BZ = default, double p9AZ = default, double p11NettoZ = default, double p11VatZ = default, TStawkaPodatku? p12Z = default, double p12ZXII = default, int p12ZZal15 = default, TGTU? gTUZ = default, TOznaczenieProceduryZ? proceduraZ = default, double kwotaAkcyzyZ = default, int stanPrzedZ = default)
        {
            this.NrWierszaZam = nrWierszaZam;
            this.UU_IDZ = uUIDZ;
            this.P7Z = p7Z;
            this.IndeksZ = indeksZ;
            this.GTINZ = gTINZ;
            this.PKWiUZ = pKWiUZ;
            this.CNZ = cNZ;
            this.PKOBZ = pKOBZ;
            this.P8AZ = p8AZ;
            this.P8BZ = p8BZ;
            this.P9AZ = p9AZ;
            this.P11NettoZ = p11NettoZ;
            this.P11VatZ = p11VatZ;
            this.P12Z = p12Z;
            this.P12ZXII = p12ZXII;
            this.P12ZZal15 = p12ZZal15;
            this.GTUZ = gTUZ;
            this.ProceduraZ = proceduraZ;
            this.KwotaAkcyzyZ = kwotaAkcyzyZ;
            this.StanPrzedZ = stanPrzedZ;
        }

        /// <summary>
        /// Liczby naturalne większe od zera
        /// </summary>
        /// <value>Liczby naturalne większe od zera</value>
        [DataMember(Name = "NrWierszaZam", EmitDefaultValue = false)]
        public long NrWierszaZam { get; set; }

        /// <summary>
        /// Typ znakowy ograniczony do 50 znaków
        /// </summary>
        /// <value>Typ znakowy ograniczony do 50 znaków</value>
        [DataMember(Name = "UU_IDZ", EmitDefaultValue = false)]
        public string UU_IDZ { get; set; }

        /// <summary>
        /// Typ znakowy ograniczony do 256 znaków
        /// </summary>
        /// <value>Typ znakowy ograniczony do 256 znaków</value>
        [DataMember(Name = "P_7Z", EmitDefaultValue = false)]
        public string P7Z { get; set; }

        /// <summary>
        /// Typ znakowy ograniczony do 50 znaków
        /// </summary>
        /// <value>Typ znakowy ograniczony do 50 znaków</value>
        [DataMember(Name = "IndeksZ", EmitDefaultValue = false)]
        public string IndeksZ { get; set; }

        /// <summary>
        /// Typ znakowy ograniczony do 20 znaków
        /// </summary>
        /// <value>Typ znakowy ograniczony do 20 znaków</value>
        [DataMember(Name = "GTINZ", EmitDefaultValue = false)]
        public string GTINZ { get; set; }

        /// <summary>
        /// Typ znakowy ograniczony do 50 znaków
        /// </summary>
        /// <value>Typ znakowy ograniczony do 50 znaków</value>
        [DataMember(Name = "PKWiUZ", EmitDefaultValue = false)]
        public string PKWiUZ { get; set; }

        /// <summary>
        /// Typ znakowy ograniczony do 50 znaków
        /// </summary>
        /// <value>Typ znakowy ograniczony do 50 znaków</value>
        [DataMember(Name = "CNZ", EmitDefaultValue = false)]
        public string CNZ { get; set; }

        /// <summary>
        /// Typ znakowy ograniczony do 50 znaków
        /// </summary>
        /// <value>Typ znakowy ograniczony do 50 znaków</value>
        [DataMember(Name = "PKOBZ", EmitDefaultValue = false)]
        public string PKOBZ { get; set; }

        /// <summary>
        /// Typ znakowy ograniczony do 256 znaków
        /// </summary>
        /// <value>Typ znakowy ograniczony do 256 znaków</value>
        [DataMember(Name = "P_8AZ", EmitDefaultValue = false)]
        public string P8AZ { get; set; }

        /// <summary>
        /// Typ wykorzystywany do określenia ilości. Wartość numeryczna 22 znaki max, w tym 6 po przecinku
        /// </summary>
        /// <value>Typ wykorzystywany do określenia ilości. Wartość numeryczna 22 znaki max, w tym 6 po przecinku</value>
        [DataMember(Name = "P_8BZ", EmitDefaultValue = false)]
        public double P8BZ { get; set; }

        /// <summary>
        /// Wartość numeryczna 22 znaki max, w tym 8 znaków po przecinku
        /// </summary>
        /// <value>Wartość numeryczna 22 znaki max, w tym 8 znaków po przecinku</value>
        [DataMember(Name = "P_9AZ", EmitDefaultValue = false)]
        public double P9AZ { get; set; }

        /// <summary>
        /// Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku
        /// </summary>
        /// <value>Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku</value>
        [DataMember(Name = "P_11NettoZ", EmitDefaultValue = false)]
        public double P11NettoZ { get; set; }

        /// <summary>
        /// Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku
        /// </summary>
        /// <value>Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku</value>
        [DataMember(Name = "P_11VatZ", EmitDefaultValue = false)]
        public double P11VatZ { get; set; }

        /// <summary>
        /// Wartość procentowa z dokładnością do 6 miejsc po przecinku
        /// </summary>
        /// <value>Wartość procentowa z dokładnością do 6 miejsc po przecinku</value>
        [DataMember(Name = "P_12Z_XII", EmitDefaultValue = false)]
        public double P12ZXII { get; set; }

        /// <summary>
        /// Pojedyncze pole wyboru
        /// </summary>
        /// <value>Pojedyncze pole wyboru</value>
        [DataMember(Name = "P_12Z_Zal_15", EmitDefaultValue = false)]
        public int P12ZZal15 { get; set; }

        /// <summary>
        /// Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku
        /// </summary>
        /// <value>Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku</value>
        [DataMember(Name = "KwotaAkcyzyZ", EmitDefaultValue = false)]
        public double KwotaAkcyzyZ { get; set; }

        /// <summary>
        /// Pojedyncze pole wyboru
        /// </summary>
        /// <value>Pojedyncze pole wyboru</value>
        [DataMember(Name = "StanPrzedZ", EmitDefaultValue = false)]
        public int StanPrzedZ { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ZamowienieWiersz {\n");
            sb.Append("  NrWierszaZam: ").Append(NrWierszaZam).Append("\n");
            sb.Append("  UU_IDZ: ").Append(UU_IDZ).Append("\n");
            sb.Append("  P7Z: ").Append(P7Z).Append("\n");
            sb.Append("  IndeksZ: ").Append(IndeksZ).Append("\n");
            sb.Append("  GTINZ: ").Append(GTINZ).Append("\n");
            sb.Append("  PKWiUZ: ").Append(PKWiUZ).Append("\n");
            sb.Append("  CNZ: ").Append(CNZ).Append("\n");
            sb.Append("  PKOBZ: ").Append(PKOBZ).Append("\n");
            sb.Append("  P8AZ: ").Append(P8AZ).Append("\n");
            sb.Append("  P8BZ: ").Append(P8BZ).Append("\n");
            sb.Append("  P9AZ: ").Append(P9AZ).Append("\n");
            sb.Append("  P11NettoZ: ").Append(P11NettoZ).Append("\n");
            sb.Append("  P11VatZ: ").Append(P11VatZ).Append("\n");
            sb.Append("  P12Z: ").Append(P12Z).Append("\n");
            sb.Append("  P12ZXII: ").Append(P12ZXII).Append("\n");
            sb.Append("  P12ZZal15: ").Append(P12ZZal15).Append("\n");
            sb.Append("  GTUZ: ").Append(GTUZ).Append("\n");
            sb.Append("  ProceduraZ: ").Append(ProceduraZ).Append("\n");
            sb.Append("  KwotaAkcyzyZ: ").Append(KwotaAkcyzyZ).Append("\n");
            sb.Append("  StanPrzedZ: ").Append(StanPrzedZ).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
