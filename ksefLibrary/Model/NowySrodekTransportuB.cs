/*
 * KSeF API
 *
 * API do systemu KSeF
 *
 * The version of the OpenAPI document: 1.2.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = KsefApi.Client.FileParameter;
using OpenAPIDateConverter = KsefApi.Client.OpenAPIDateConverter;

namespace KsefApi.Model
{
    /// <summary>
    /// NowySrodekTransportuB
    /// </summary>
    [DataContract(Name = "NowySrodekTransportuB")]
    public partial class NowySrodekTransportuB
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NowySrodekTransportuB" /> class.
        /// </summary>
        /// <param name="p22B">Typ znakowy ograniczony do 256 znaków.</param>
        /// <param name="p22B1">Typ znakowy ograniczony do 256 znaków.</param>
        /// <param name="p22B2">Typ znakowy ograniczony do 256 znaków.</param>
        /// <param name="p22B3">Typ znakowy ograniczony do 256 znaków.</param>
        /// <param name="p22B4">Typ znakowy ograniczony do 256 znaków.</param>
        /// <param name="p22BT">Typ znakowy ograniczony do 256 znaków.</param>
        public NowySrodekTransportuB(string p22B = default, string p22B1 = default, string p22B2 = default, string p22B3 = default, string p22B4 = default, string p22BT = default)
        {
            this.P22B = p22B;
            this.P22B1 = p22B1;
            this.P22B2 = p22B2;
            this.P22B3 = p22B3;
            this.P22B4 = p22B4;
            this.P22BT = p22BT;
        }

        /// <summary>
        /// Typ znakowy ograniczony do 256 znaków
        /// </summary>
        /// <value>Typ znakowy ograniczony do 256 znaków</value>
        [DataMember(Name = "P_22B", EmitDefaultValue = false)]
        public string P22B { get; set; }

        /// <summary>
        /// Typ znakowy ograniczony do 256 znaków
        /// </summary>
        /// <value>Typ znakowy ograniczony do 256 znaków</value>
        [DataMember(Name = "P_22B1", EmitDefaultValue = false)]
        public string P22B1 { get; set; }

        /// <summary>
        /// Typ znakowy ograniczony do 256 znaków
        /// </summary>
        /// <value>Typ znakowy ograniczony do 256 znaków</value>
        [DataMember(Name = "P_22B2", EmitDefaultValue = false)]
        public string P22B2 { get; set; }

        /// <summary>
        /// Typ znakowy ograniczony do 256 znaków
        /// </summary>
        /// <value>Typ znakowy ograniczony do 256 znaków</value>
        [DataMember(Name = "P_22B3", EmitDefaultValue = false)]
        public string P22B3 { get; set; }

        /// <summary>
        /// Typ znakowy ograniczony do 256 znaków
        /// </summary>
        /// <value>Typ znakowy ograniczony do 256 znaków</value>
        [DataMember(Name = "P_22B4", EmitDefaultValue = false)]
        public string P22B4 { get; set; }

        /// <summary>
        /// Typ znakowy ograniczony do 256 znaków
        /// </summary>
        /// <value>Typ znakowy ograniczony do 256 znaków</value>
        [DataMember(Name = "P_22BT", EmitDefaultValue = false)]
        public string P22BT { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NowySrodekTransportuB {\n");
            sb.Append("  P22B: ").Append(P22B).Append("\n");
            sb.Append("  P22B1: ").Append(P22B1).Append("\n");
            sb.Append("  P22B2: ").Append(P22B2).Append("\n");
            sb.Append("  P22B3: ").Append(P22B3).Append("\n");
            sb.Append("  P22B4: ").Append(P22B4).Append("\n");
            sb.Append("  P22BT: ").Append(P22BT).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
