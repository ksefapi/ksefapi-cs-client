/*
 * KSeF API
 *
 * API do systemu KSeF
 *
 * The version of the OpenAPI document: 1.2.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = KsefApi.Client.FileParameter;
using OpenAPIDateConverter = KsefApi.Client.OpenAPIDateConverter;

namespace KsefApi.Model
{
    /// <summary>
    /// Podmiot3Dane
    /// </summary>
    [DataContract(Name = "Podmiot3Dane")]
    public partial class Podmiot3Dane
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Podmiot3Dane" /> class.
        /// </summary>
        /// <param name="iDNabywcy">Unikalny klucz powiązania danych nabywcy na fakturach korygujących, w przypadku gdy dane nabywcy na fakturze korygującej zmieniły się w stosunku do danych na fakturze korygowanej.</param>
        /// <param name="nrEORI">Typ znakowy ograniczony do 256 znaków.</param>
        /// <param name="daneIdentyfikacyjne">daneIdentyfikacyjne.</param>
        /// <param name="adres">adres.</param>
        /// <param name="adresKoresp">adresKoresp.</param>
        /// <param name="daneKontaktowe">daneKontaktowe.</param>
        /// <param name="udzial">Wartość procentowa z dokładnością do 6 miejsc po przecinku.</param>
        /// <param name="nrKlienta">Typ znakowy ograniczony do 256 znaków.</param>
        public Podmiot3Dane(string iDNabywcy = default, string nrEORI = default, TPodmiot3 daneIdentyfikacyjne = default, TAdres adres = default, TAdres adresKoresp = default, List<DaneKontaktowe> daneKontaktowe = default, double udzial = default, string nrKlienta = default)
        {
            this.IDNabywcy = iDNabywcy;
            this.NrEORI = nrEORI;
            this.DaneIdentyfikacyjne = daneIdentyfikacyjne;
            this.Adres = adres;
            this.AdresKoresp = adresKoresp;
            this.DaneKontaktowe = daneKontaktowe;
            this.Udzial = udzial;
            this.NrKlienta = nrKlienta;
        }

        /// <summary>
        /// Unikalny klucz powiązania danych nabywcy na fakturach korygujących, w przypadku gdy dane nabywcy na fakturze korygującej zmieniły się w stosunku do danych na fakturze korygowanej
        /// </summary>
        /// <value>Unikalny klucz powiązania danych nabywcy na fakturach korygujących, w przypadku gdy dane nabywcy na fakturze korygującej zmieniły się w stosunku do danych na fakturze korygowanej</value>
        [DataMember(Name = "IDNabywcy", EmitDefaultValue = false)]
        public string IDNabywcy { get; set; }

        /// <summary>
        /// Typ znakowy ograniczony do 256 znaków
        /// </summary>
        /// <value>Typ znakowy ograniczony do 256 znaków</value>
        [DataMember(Name = "NrEORI", EmitDefaultValue = false)]
        public string NrEORI { get; set; }

        /// <summary>
        /// Gets or Sets DaneIdentyfikacyjne
        /// </summary>
        [DataMember(Name = "DaneIdentyfikacyjne", EmitDefaultValue = false)]
        public TPodmiot3 DaneIdentyfikacyjne { get; set; }

        /// <summary>
        /// Gets or Sets Adres
        /// </summary>
        [DataMember(Name = "Adres", EmitDefaultValue = false)]
        public TAdres Adres { get; set; }

        /// <summary>
        /// Gets or Sets AdresKoresp
        /// </summary>
        [DataMember(Name = "AdresKoresp", EmitDefaultValue = false)]
        public TAdres AdresKoresp { get; set; }

        /// <summary>
        /// Gets or Sets DaneKontaktowe
        /// </summary>
        [DataMember(Name = "DaneKontaktowe", EmitDefaultValue = false)]
        public List<DaneKontaktowe> DaneKontaktowe { get; set; }

        /// <summary>
        /// Wartość procentowa z dokładnością do 6 miejsc po przecinku
        /// </summary>
        /// <value>Wartość procentowa z dokładnością do 6 miejsc po przecinku</value>
        [DataMember(Name = "Udzial", EmitDefaultValue = false)]
        public double Udzial { get; set; }

        /// <summary>
        /// Typ znakowy ograniczony do 256 znaków
        /// </summary>
        /// <value>Typ znakowy ograniczony do 256 znaków</value>
        [DataMember(Name = "NrKlienta", EmitDefaultValue = false)]
        public string NrKlienta { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Podmiot3Dane {\n");
            sb.Append("  IDNabywcy: ").Append(IDNabywcy).Append("\n");
            sb.Append("  NrEORI: ").Append(NrEORI).Append("\n");
            sb.Append("  DaneIdentyfikacyjne: ").Append(DaneIdentyfikacyjne).Append("\n");
            sb.Append("  Adres: ").Append(Adres).Append("\n");
            sb.Append("  AdresKoresp: ").Append(AdresKoresp).Append("\n");
            sb.Append("  DaneKontaktowe: ").Append(DaneKontaktowe).Append("\n");
            sb.Append("  Udzial: ").Append(Udzial).Append("\n");
            sb.Append("  NrKlienta: ").Append(NrKlienta).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
