/*
 * KSeF API
 *
 * API do systemu KSeF
 *
 * The version of the OpenAPI document: 1.2.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = KsefApi.Client.FileParameter;
using OpenAPIDateConverter = KsefApi.Client.OpenAPIDateConverter;

namespace KsefApi.Model
{
    /// <summary>
    /// Szczegółowe pozycje faktury w walucie, w której wystawiono fakturę - węzeł opcjonalny dla faktury zaliczkowej, faktury korygującej fakturę zaliczkową, oraz faktur korygujących dotyczących wszystkich dostaw towarów lub usług dokonanych lub świadczonych w danym okresie, o których mowa w art. 106j ust. 3 ustawy, dla których należy podać dane dotyczące opustu lub obniżki w podziale na stawki podatku i procedury w części Fa. W przypadku faktur korygujących, o których mowa w art. 106j ust. 3 ustawy, gdy opust lub obniżka ceny odnosi się do części dostaw towarów lub usług dokonanych lub świadczonych w danym okresie w części FaWiersz należy podać nazwy (rodzaje) towarów lub usług objętych korektą. W przypadku faktur, o których mowa w art. 106f ust. 3 ustawy, należy wykazać pełne wartości zamówienia lub umowy. W przypadku faktur korygujących pozycje faktury (w tym faktur korygujących faktury, o których mowa w art. 106f ust. 3 ustawy, jeśli korekta dotyczy wartości zamówienia), należy wykazać różnice wynikające z korekty poszczególnych pozycji lub dane pozycji korygowanych w stanie przed korektą i po korekcie jako osobne wiersze. W przypadku faktur korygujących faktury, o których mowa w art. 106f ust. 3 ustawy, jeśli korekta nie dotyczy wartości zamówienia i jednocześnie zmienia wysokość podstawy opodatkowania lub podatku, należy wprowadzić zapis wg stanu przed korektą i zapis w stanie po korekcie w celu potwierdzenia braku zmiany wartości danej pozycji faktury
    /// </summary>
    [DataContract(Name = "FaWiersz")]
    public partial class FaWiersz
    {

        /// <summary>
        /// Gets or Sets P12
        /// </summary>
        [DataMember(Name = "P_12", EmitDefaultValue = false)]
        public TStawkaPodatku? P12 { get; set; }

        /// <summary>
        /// Gets or Sets GTU
        /// </summary>
        [DataMember(Name = "GTU", EmitDefaultValue = false)]
        public TGTU? GTU { get; set; }

        /// <summary>
        /// Gets or Sets Procedura
        /// </summary>
        [DataMember(Name = "Procedura", EmitDefaultValue = false)]
        public TOznaczenieProcedury? Procedura { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FaWiersz" /> class.
        /// </summary>
        /// <param name="nrWierszaFa">Liczby naturalne większe od zera.</param>
        /// <param name="uUID">Typ znakowy ograniczony do 50 znaków.</param>
        /// <param name="p6A">Data zdarzenia w okresie od 2006-01-01 do 2050-01-01.</param>
        /// <param name="p7">Typ znakowy ograniczony do 256 znaków.</param>
        /// <param name="indeks">Typ znakowy ograniczony do 50 znaków.</param>
        /// <param name="gTIN">Typ znakowy ograniczony do 20 znaków.</param>
        /// <param name="pKWiU">Typ znakowy ograniczony do 50 znaków.</param>
        /// <param name="cN">Typ znakowy ograniczony do 50 znaków.</param>
        /// <param name="pKOB">Typ znakowy ograniczony do 50 znaków.</param>
        /// <param name="p8A">Typ znakowy ograniczony do 256 znaków.</param>
        /// <param name="p8B">Typ wykorzystywany do określenia ilości. Wartość numeryczna 22 znaki max, w tym 6 po przecinku.</param>
        /// <param name="p9A">Wartość numeryczna 22 znaki max, w tym 8 znaków po przecinku.</param>
        /// <param name="p9B">Wartość numeryczna 22 znaki max, w tym 8 znaków po przecinku.</param>
        /// <param name="p10">Wartość numeryczna 22 znaki max, w tym 8 znaków po przecinku.</param>
        /// <param name="p11">Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku.</param>
        /// <param name="p11A">Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku.</param>
        /// <param name="p11Vat">Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku.</param>
        /// <param name="p12">p12.</param>
        /// <param name="p12XII">Wartość procentowa z dokładnością do 6 miejsc po przecinku.</param>
        /// <param name="p12Zal15">Pojedyncze pole wyboru.</param>
        /// <param name="kwotaAkcyzy">Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku.</param>
        /// <param name="gTU">gTU.</param>
        /// <param name="procedura">procedura.</param>
        /// <param name="kursWaluty">Typ wykorzystywany do określenia ilości. Wartość numeryczna 22 znaki max, w tym 6 po przecinku.</param>
        /// <param name="stanPrzed">Pojedyncze pole wyboru.</param>
        public FaWiersz(int nrWierszaFa = default, string uUID = default, DateTime p6A = default, string p7 = default, string indeks = default, string gTIN = default, string pKWiU = default, string cN = default, string pKOB = default, string p8A = default, double p8B = default, double p9A = default, double p9B = default, double p10 = default, double p11 = default, double p11A = default, double p11Vat = default, TStawkaPodatku? p12 = default, double p12XII = default, int p12Zal15 = default, double kwotaAkcyzy = default, TGTU? gTU = default, TOznaczenieProcedury? procedura = default, double kursWaluty = default, int stanPrzed = default)
        {
            this.NrWierszaFa = nrWierszaFa;
            this.UU_ID = uUID;
            this.P6A = p6A;
            this.P7 = p7;
            this.Indeks = indeks;
            this.GTIN = gTIN;
            this.PKWiU = pKWiU;
            this.CN = cN;
            this.PKOB = pKOB;
            this.P8A = p8A;
            this.P8B = p8B;
            this.P9A = p9A;
            this.P9B = p9B;
            this.P10 = p10;
            this.P11 = p11;
            this.P11A = p11A;
            this.P11Vat = p11Vat;
            this.P12 = p12;
            this.P12XII = p12XII;
            this.P12Zal15 = p12Zal15;
            this.KwotaAkcyzy = kwotaAkcyzy;
            this.GTU = gTU;
            this.Procedura = procedura;
            this.KursWaluty = kursWaluty;
            this.StanPrzed = stanPrzed;
        }

        /// <summary>
        /// Liczby naturalne większe od zera
        /// </summary>
        /// <value>Liczby naturalne większe od zera</value>
        [DataMember(Name = "NrWierszaFa", EmitDefaultValue = false)]
        public long NrWierszaFa { get; set; }

        /// <summary>
        /// Typ znakowy ograniczony do 50 znaków
        /// </summary>
        /// <value>Typ znakowy ograniczony do 50 znaków</value>
        [DataMember(Name = "UU_ID", EmitDefaultValue = false)]
        public string UU_ID { get; set; }

        /// <summary>
        /// Data zdarzenia w okresie od 2006-01-01 do 2050-01-01
        /// </summary>
        /// <value>Data zdarzenia w okresie od 2006-01-01 do 2050-01-01</value>
        [DataMember(Name = "P_6A", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime P6A { get; set; }

        /// <summary>
        /// Typ znakowy ograniczony do 256 znaków
        /// </summary>
        /// <value>Typ znakowy ograniczony do 256 znaków</value>
        [DataMember(Name = "P_7", EmitDefaultValue = false)]
        public string P7 { get; set; }

        /// <summary>
        /// Typ znakowy ograniczony do 50 znaków
        /// </summary>
        /// <value>Typ znakowy ograniczony do 50 znaków</value>
        [DataMember(Name = "Indeks", EmitDefaultValue = false)]
        public string Indeks { get; set; }

        /// <summary>
        /// Typ znakowy ograniczony do 20 znaków
        /// </summary>
        /// <value>Typ znakowy ograniczony do 20 znaków</value>
        [DataMember(Name = "GTIN", EmitDefaultValue = false)]
        public string GTIN { get; set; }

        /// <summary>
        /// Typ znakowy ograniczony do 50 znaków
        /// </summary>
        /// <value>Typ znakowy ograniczony do 50 znaków</value>
        [DataMember(Name = "PKWiU", EmitDefaultValue = false)]
        public string PKWiU { get; set; }

        /// <summary>
        /// Typ znakowy ograniczony do 50 znaków
        /// </summary>
        /// <value>Typ znakowy ograniczony do 50 znaków</value>
        [DataMember(Name = "CN", EmitDefaultValue = false)]
        public string CN { get; set; }

        /// <summary>
        /// Typ znakowy ograniczony do 50 znaków
        /// </summary>
        /// <value>Typ znakowy ograniczony do 50 znaków</value>
        [DataMember(Name = "PKOB", EmitDefaultValue = false)]
        public string PKOB { get; set; }

        /// <summary>
        /// Typ znakowy ograniczony do 256 znaków
        /// </summary>
        /// <value>Typ znakowy ograniczony do 256 znaków</value>
        [DataMember(Name = "P_8A", EmitDefaultValue = false)]
        public string P8A { get; set; }

        /// <summary>
        /// Typ wykorzystywany do określenia ilości. Wartość numeryczna 22 znaki max, w tym 6 po przecinku
        /// </summary>
        /// <value>Typ wykorzystywany do określenia ilości. Wartość numeryczna 22 znaki max, w tym 6 po przecinku</value>
        [DataMember(Name = "P_8B", EmitDefaultValue = false)]
        public double P8B { get; set; }

        /// <summary>
        /// Wartość numeryczna 22 znaki max, w tym 8 znaków po przecinku
        /// </summary>
        /// <value>Wartość numeryczna 22 znaki max, w tym 8 znaków po przecinku</value>
        [DataMember(Name = "P_9A", EmitDefaultValue = false)]
        public double P9A { get; set; }

        /// <summary>
        /// Wartość numeryczna 22 znaki max, w tym 8 znaków po przecinku
        /// </summary>
        /// <value>Wartość numeryczna 22 znaki max, w tym 8 znaków po przecinku</value>
        [DataMember(Name = "P_9B", EmitDefaultValue = false)]
        public double P9B { get; set; }

        /// <summary>
        /// Wartość numeryczna 22 znaki max, w tym 8 znaków po przecinku
        /// </summary>
        /// <value>Wartość numeryczna 22 znaki max, w tym 8 znaków po przecinku</value>
        [DataMember(Name = "P_10", EmitDefaultValue = false)]
        public double P10 { get; set; }

        /// <summary>
        /// Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku
        /// </summary>
        /// <value>Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku</value>
        [DataMember(Name = "P_11", EmitDefaultValue = false)]
        public double P11 { get; set; }

        /// <summary>
        /// Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku
        /// </summary>
        /// <value>Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku</value>
        [DataMember(Name = "P_11A", EmitDefaultValue = false)]
        public double P11A { get; set; }

        /// <summary>
        /// Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku
        /// </summary>
        /// <value>Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku</value>
        [DataMember(Name = "P_11Vat", EmitDefaultValue = false)]
        public double P11Vat { get; set; }

        /// <summary>
        /// Wartość procentowa z dokładnością do 6 miejsc po przecinku
        /// </summary>
        /// <value>Wartość procentowa z dokładnością do 6 miejsc po przecinku</value>
        [DataMember(Name = "P_12_XII", EmitDefaultValue = false)]
        public double P12XII { get; set; }

        /// <summary>
        /// Pojedyncze pole wyboru
        /// </summary>
        /// <value>Pojedyncze pole wyboru</value>
        [DataMember(Name = "P_12_Zal_15", EmitDefaultValue = false)]
        public int P12Zal15 { get; set; }

        /// <summary>
        /// Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku
        /// </summary>
        /// <value>Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku</value>
        [DataMember(Name = "KwotaAkcyzy", EmitDefaultValue = false)]
        public double KwotaAkcyzy { get; set; }

        /// <summary>
        /// Typ wykorzystywany do określenia ilości. Wartość numeryczna 22 znaki max, w tym 6 po przecinku
        /// </summary>
        /// <value>Typ wykorzystywany do określenia ilości. Wartość numeryczna 22 znaki max, w tym 6 po przecinku</value>
        [DataMember(Name = "KursWaluty", EmitDefaultValue = false)]
        public double KursWaluty { get; set; }

        /// <summary>
        /// Pojedyncze pole wyboru
        /// </summary>
        /// <value>Pojedyncze pole wyboru</value>
        [DataMember(Name = "StanPrzed", EmitDefaultValue = false)]
        public int StanPrzed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FaWiersz {\n");
            sb.Append("  NrWierszaFa: ").Append(NrWierszaFa).Append("\n");
            sb.Append("  UU_ID: ").Append(UU_ID).Append("\n");
            sb.Append("  P6A: ").Append(P6A).Append("\n");
            sb.Append("  P7: ").Append(P7).Append("\n");
            sb.Append("  Indeks: ").Append(Indeks).Append("\n");
            sb.Append("  GTIN: ").Append(GTIN).Append("\n");
            sb.Append("  PKWiU: ").Append(PKWiU).Append("\n");
            sb.Append("  CN: ").Append(CN).Append("\n");
            sb.Append("  PKOB: ").Append(PKOB).Append("\n");
            sb.Append("  P8A: ").Append(P8A).Append("\n");
            sb.Append("  P8B: ").Append(P8B).Append("\n");
            sb.Append("  P9A: ").Append(P9A).Append("\n");
            sb.Append("  P9B: ").Append(P9B).Append("\n");
            sb.Append("  P10: ").Append(P10).Append("\n");
            sb.Append("  P11: ").Append(P11).Append("\n");
            sb.Append("  P11A: ").Append(P11A).Append("\n");
            sb.Append("  P11Vat: ").Append(P11Vat).Append("\n");
            sb.Append("  P12: ").Append(P12).Append("\n");
            sb.Append("  P12XII: ").Append(P12XII).Append("\n");
            sb.Append("  P12Zal15: ").Append(P12Zal15).Append("\n");
            sb.Append("  KwotaAkcyzy: ").Append(KwotaAkcyzy).Append("\n");
            sb.Append("  GTU: ").Append(GTU).Append("\n");
            sb.Append("  Procedura: ").Append(Procedura).Append("\n");
            sb.Append("  KursWaluty: ").Append(KursWaluty).Append("\n");
            sb.Append("  StanPrzed: ").Append(StanPrzed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
