/*
 * KSeF API
 *
 * API do systemu KSeF
 *
 * The version of the OpenAPI document: 1.2.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = KsefApi.Client.FileParameter;
using OpenAPIDateConverter = KsefApi.Client.OpenAPIDateConverter;

namespace KsefApi.Model
{
    /// <summary>
    /// Na podstawie art. 106a - 106q ustawy. Pola dotyczące wartości sprzedaży i podatku wypełnia się w walucie, w której wystawiono fakturę, z wyjątkiem pól dotyczących podatku przeliczonego zgodnie z przepisami Działu VI w związku z art. 106e ust. 11 ustawy. W przypadku wystawienia faktury korygującej, wypełnia się wszystkie pola wg stanu po korekcie, a pola dotyczące podstaw opodatkowania, podatku oraz należności ogółem wypełnia się poprzez różnicę
    /// </summary>
    [DataContract(Name = "Fa")]
    public partial class Fa
    {

        /// <summary>
        /// Gets or Sets KodWaluty
        /// </summary>
        [DataMember(Name = "KodWaluty", EmitDefaultValue = false)]
        public TKodWaluty? KodWaluty { get; set; }

        /// <summary>
        /// Gets or Sets RodzajFaktury
        /// </summary>
        [DataMember(Name = "RodzajFaktury", EmitDefaultValue = false)]
        public TRodzajFaktury? RodzajFaktury { get; set; }

        /// <summary>
        /// Gets or Sets TypKorekty
        /// </summary>
        [DataMember(Name = "TypKorekty", EmitDefaultValue = false)]
        public TTypKorekty? TypKorekty { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Fa" /> class.
        /// </summary>
        /// <param name="kodWaluty">kodWaluty.</param>
        /// <param name="p1">Data zdarzenia w okresie od 2006-01-01 do 2050-01-01.</param>
        /// <param name="p1M">Typ znakowy ograniczony do 256 znaków.</param>
        /// <param name="p2">Typ znakowy ograniczony do 256 znaków.</param>
        /// <param name="wZ">wZ.</param>
        /// <param name="p131">Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku.</param>
        /// <param name="p141">Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku.</param>
        /// <param name="p141W">Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku.</param>
        /// <param name="p132">Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku.</param>
        /// <param name="p142">Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku.</param>
        /// <param name="p142W">Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku.</param>
        /// <param name="p133">Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku.</param>
        /// <param name="p143">Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku.</param>
        /// <param name="p143W">Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku.</param>
        /// <param name="p134">Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku.</param>
        /// <param name="p144">Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku.</param>
        /// <param name="p144W">Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku.</param>
        /// <param name="p135">Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku.</param>
        /// <param name="p145">Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku.</param>
        /// <param name="p1361">Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku.</param>
        /// <param name="p1362">Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku.</param>
        /// <param name="p1363">Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku.</param>
        /// <param name="p137">Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku.</param>
        /// <param name="p138">Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku.</param>
        /// <param name="p139">Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku.</param>
        /// <param name="p1310">Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku.</param>
        /// <param name="p1311">Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku.</param>
        /// <param name="p15">Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku.</param>
        /// <param name="kursWalutyZ">Typ wykorzystywany do określenia ilości. Wartość numeryczna 22 znaki max, w tym 6 po przecinku.</param>
        /// <param name="adnotacje">adnotacje.</param>
        /// <param name="rodzajFaktury">rodzajFaktury.</param>
        /// <param name="przyczynaKorekty">Typ znakowy ograniczony do 256 znaków.</param>
        /// <param name="typKorekty">typKorekty.</param>
        /// <param name="daneFaKorygowanej">daneFaKorygowanej.</param>
        /// <param name="okresFaKorygowanej">Typ znakowy ograniczony do 256 znaków.</param>
        /// <param name="nrFaKorygowany">Typ znakowy ograniczony do 256 znaków.</param>
        /// <param name="podmiot1K">podmiot1K.</param>
        /// <param name="podmiot2K">podmiot2K.</param>
        /// <param name="p15ZK">Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku.</param>
        /// <param name="kursWalutyZK">Typ wykorzystywany do określenia ilości. Wartość numeryczna 22 znaki max, w tym 6 po przecinku.</param>
        /// <param name="zaliczkaCzesciowa">zaliczkaCzesciowa.</param>
        /// <param name="fP">Pojedyncze pole wyboru.</param>
        /// <param name="tP">Pojedyncze pole wyboru.</param>
        /// <param name="dodatkowyOpis">dodatkowyOpis.</param>
        /// <param name="fakturaZaliczkowa">fakturaZaliczkowa.</param>
        /// <param name="zwrotAkcyzy">Pojedyncze pole wyboru.</param>
        /// <param name="faWiersz">faWiersz.</param>
        /// <param name="rozliczenie">rozliczenie.</param>
        /// <param name="platnosc">platnosc.</param>
        /// <param name="warunkiTransakcji">warunkiTransakcji.</param>
        /// <param name="zamowienie">zamowienie.</param>
        /// <param name="p6">Data zdarzenia w okresie od 2006-01-01 do 2050-01-01.</param>
        /// <param name="p6Od">Data zdarzenia w okresie od 2006-01-01 do 2050-01-01.</param>
        /// <param name="p6Do">Data zdarzenia w okresie od 2006-01-01 do 2050-01-01.</param>
        public Fa(TKodWaluty? kodWaluty = default, DateTime p1 = default, string p1M = default, string p2 = default, List<string> wZ = default, double p131 = default, double p141 = default, double p141W = default, double p132 = default, double p142 = default, double p142W = default, double p133 = default, double p143 = default, double p143W = default, double p134 = default, double p144 = default, double p144W = default, double p135 = default, double p145 = default, double p1361 = default, double p1362 = default, double p1363 = default, double p137 = default, double p138 = default, double p139 = default, double p1310 = default, double p1311 = default, double p15 = default, double kursWalutyZ = default, Adnotacje adnotacje = default, TRodzajFaktury? rodzajFaktury = default, string przyczynaKorekty = default, TTypKorekty? typKorekty = default, List<DaneFaKorygowanej> daneFaKorygowanej = default, string okresFaKorygowanej = default, string nrFaKorygowany = default, Podmiot1K podmiot1K = default, List<Podmiot2K> podmiot2K = default, double p15ZK = default, double kursWalutyZK = default, List<ZaliczkaCzesciowa> zaliczkaCzesciowa = default, int fP = default, int tP = default, List<TKluczWartosc> dodatkowyOpis = default, List<FakturaZaliczkowa> fakturaZaliczkowa = default, int zwrotAkcyzy = default, List<FaWiersz> faWiersz = default, Rozliczenie rozliczenie = default, Platnosc platnosc = default, WarunkiTransakcji warunkiTransakcji = default, Zamowienie zamowienie = default, DateTime p6 = default, DateTime p6Od = default, DateTime p6Do = default)
        {
            this.KodWaluty = kodWaluty;
            this.P1 = p1;
            this.P1M = p1M;
            this.P2 = p2;
            this.WZ = wZ;
            this.P131 = p131;
            this.P141 = p141;
            this.P141W = p141W;
            this.P132 = p132;
            this.P142 = p142;
            this.P142W = p142W;
            this.P133 = p133;
            this.P143 = p143;
            this.P143W = p143W;
            this.P134 = p134;
            this.P144 = p144;
            this.P144W = p144W;
            this.P135 = p135;
            this.P145 = p145;
            this.P1361 = p1361;
            this.P1362 = p1362;
            this.P1363 = p1363;
            this.P137 = p137;
            this.P138 = p138;
            this.P139 = p139;
            this.P1310 = p1310;
            this.P1311 = p1311;
            this.P15 = p15;
            this.KursWalutyZ = kursWalutyZ;
            this.Adnotacje = adnotacje;
            this.RodzajFaktury = rodzajFaktury;
            this.PrzyczynaKorekty = przyczynaKorekty;
            this.TypKorekty = typKorekty;
            this.DaneFaKorygowanej = daneFaKorygowanej;
            this.OkresFaKorygowanej = okresFaKorygowanej;
            this.NrFaKorygowany = nrFaKorygowany;
            this.Podmiot1K = podmiot1K;
            this.Podmiot2K = podmiot2K;
            this.P15ZK = p15ZK;
            this.KursWalutyZK = kursWalutyZK;
            this.ZaliczkaCzesciowa = zaliczkaCzesciowa;
            this.FP = fP;
            this.TP = tP;
            this.DodatkowyOpis = dodatkowyOpis;
            this.FakturaZaliczkowa = fakturaZaliczkowa;
            this.ZwrotAkcyzy = zwrotAkcyzy;
            this.FaWiersz = faWiersz;
            this.Rozliczenie = rozliczenie;
            this.Platnosc = platnosc;
            this.WarunkiTransakcji = warunkiTransakcji;
            this.Zamowienie = zamowienie;
            this.P6 = p6;
            this.P6Od = p6Od;
            this.P6Do = p6Do;
        }

        /// <summary>
        /// Data zdarzenia w okresie od 2006-01-01 do 2050-01-01
        /// </summary>
        /// <value>Data zdarzenia w okresie od 2006-01-01 do 2050-01-01</value>
        [DataMember(Name = "P_1", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime P1 { get; set; }

        /// <summary>
        /// Typ znakowy ograniczony do 256 znaków
        /// </summary>
        /// <value>Typ znakowy ograniczony do 256 znaków</value>
        [DataMember(Name = "P_1M", EmitDefaultValue = false)]
        public string P1M { get; set; }

        /// <summary>
        /// Typ znakowy ograniczony do 256 znaków
        /// </summary>
        /// <value>Typ znakowy ograniczony do 256 znaków</value>
        [DataMember(Name = "P_2", EmitDefaultValue = false)]
        public string P2 { get; set; }

        /// <summary>
        /// Gets or Sets WZ
        /// </summary>
        [DataMember(Name = "WZ", EmitDefaultValue = false)]
        public List<string> WZ { get; set; }

        /// <summary>
        /// Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku
        /// </summary>
        /// <value>Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku</value>
        [DataMember(Name = "P_13_1", EmitDefaultValue = false)]
        public double P131 { get; set; }

        /// <summary>
        /// Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku
        /// </summary>
        /// <value>Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku</value>
        [DataMember(Name = "P_14_1", EmitDefaultValue = false)]
        public double P141 { get; set; }

        /// <summary>
        /// Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku
        /// </summary>
        /// <value>Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku</value>
        [DataMember(Name = "P_14_1W", EmitDefaultValue = false)]
        public double P141W { get; set; }

        /// <summary>
        /// Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku
        /// </summary>
        /// <value>Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku</value>
        [DataMember(Name = "P_13_2", EmitDefaultValue = false)]
        public double P132 { get; set; }

        /// <summary>
        /// Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku
        /// </summary>
        /// <value>Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku</value>
        [DataMember(Name = "P_14_2", EmitDefaultValue = false)]
        public double P142 { get; set; }

        /// <summary>
        /// Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku
        /// </summary>
        /// <value>Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku</value>
        [DataMember(Name = "P_14_2W", EmitDefaultValue = false)]
        public double P142W { get; set; }

        /// <summary>
        /// Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku
        /// </summary>
        /// <value>Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku</value>
        [DataMember(Name = "P_13_3", EmitDefaultValue = false)]
        public double P133 { get; set; }

        /// <summary>
        /// Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku
        /// </summary>
        /// <value>Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku</value>
        [DataMember(Name = "P_14_3", EmitDefaultValue = false)]
        public double P143 { get; set; }

        /// <summary>
        /// Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku
        /// </summary>
        /// <value>Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku</value>
        [DataMember(Name = "P_14_3W", EmitDefaultValue = false)]
        public double P143W { get; set; }

        /// <summary>
        /// Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku
        /// </summary>
        /// <value>Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku</value>
        [DataMember(Name = "P_13_4", EmitDefaultValue = false)]
        public double P134 { get; set; }

        /// <summary>
        /// Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku
        /// </summary>
        /// <value>Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku</value>
        [DataMember(Name = "P_14_4", EmitDefaultValue = false)]
        public double P144 { get; set; }

        /// <summary>
        /// Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku
        /// </summary>
        /// <value>Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku</value>
        [DataMember(Name = "P_14_4W", EmitDefaultValue = false)]
        public double P144W { get; set; }

        /// <summary>
        /// Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku
        /// </summary>
        /// <value>Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku</value>
        [DataMember(Name = "P_13_5", EmitDefaultValue = false)]
        public double P135 { get; set; }

        /// <summary>
        /// Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku
        /// </summary>
        /// <value>Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku</value>
        [DataMember(Name = "P_14_5", EmitDefaultValue = false)]
        public double P145 { get; set; }

        /// <summary>
        /// Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku
        /// </summary>
        /// <value>Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku</value>
        [DataMember(Name = "P_13_6_1", EmitDefaultValue = false)]
        public double P1361 { get; set; }

        /// <summary>
        /// Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku
        /// </summary>
        /// <value>Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku</value>
        [DataMember(Name = "P_13_6_2", EmitDefaultValue = false)]
        public double P1362 { get; set; }

        /// <summary>
        /// Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku
        /// </summary>
        /// <value>Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku</value>
        [DataMember(Name = "P_13_6_3", EmitDefaultValue = false)]
        public double P1363 { get; set; }

        /// <summary>
        /// Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku
        /// </summary>
        /// <value>Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku</value>
        [DataMember(Name = "P_13_7", EmitDefaultValue = false)]
        public double P137 { get; set; }

        /// <summary>
        /// Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku
        /// </summary>
        /// <value>Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku</value>
        [DataMember(Name = "P_13_8", EmitDefaultValue = false)]
        public double P138 { get; set; }

        /// <summary>
        /// Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku
        /// </summary>
        /// <value>Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku</value>
        [DataMember(Name = "P_13_9", EmitDefaultValue = false)]
        public double P139 { get; set; }

        /// <summary>
        /// Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku
        /// </summary>
        /// <value>Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku</value>
        [DataMember(Name = "P_13_10", EmitDefaultValue = false)]
        public double P1310 { get; set; }

        /// <summary>
        /// Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku
        /// </summary>
        /// <value>Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku</value>
        [DataMember(Name = "P_13_11", EmitDefaultValue = false)]
        public double P1311 { get; set; }

        /// <summary>
        /// Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku
        /// </summary>
        /// <value>Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku</value>
        [DataMember(Name = "P_15", EmitDefaultValue = false)]
        public double P15 { get; set; }

        /// <summary>
        /// Typ wykorzystywany do określenia ilości. Wartość numeryczna 22 znaki max, w tym 6 po przecinku
        /// </summary>
        /// <value>Typ wykorzystywany do określenia ilości. Wartość numeryczna 22 znaki max, w tym 6 po przecinku</value>
        [DataMember(Name = "KursWalutyZ", EmitDefaultValue = false)]
        public double KursWalutyZ { get; set; }

        /// <summary>
        /// Gets or Sets Adnotacje
        /// </summary>
        [DataMember(Name = "Adnotacje", EmitDefaultValue = false)]
        public Adnotacje Adnotacje { get; set; }

        /// <summary>
        /// Typ znakowy ograniczony do 256 znaków
        /// </summary>
        /// <value>Typ znakowy ograniczony do 256 znaków</value>
        [DataMember(Name = "PrzyczynaKorekty", EmitDefaultValue = false)]
        public string PrzyczynaKorekty { get; set; }

        /// <summary>
        /// Gets or Sets DaneFaKorygowanej
        /// </summary>
        [DataMember(Name = "DaneFaKorygowanej", EmitDefaultValue = false)]
        public List<DaneFaKorygowanej> DaneFaKorygowanej { get; set; }

        /// <summary>
        /// Typ znakowy ograniczony do 256 znaków
        /// </summary>
        /// <value>Typ znakowy ograniczony do 256 znaków</value>
        [DataMember(Name = "OkresFaKorygowanej", EmitDefaultValue = false)]
        public string OkresFaKorygowanej { get; set; }

        /// <summary>
        /// Typ znakowy ograniczony do 256 znaków
        /// </summary>
        /// <value>Typ znakowy ograniczony do 256 znaków</value>
        [DataMember(Name = "NrFaKorygowany", EmitDefaultValue = false)]
        public string NrFaKorygowany { get; set; }

        /// <summary>
        /// Gets or Sets Podmiot1K
        /// </summary>
        [DataMember(Name = "Podmiot1K", EmitDefaultValue = false)]
        public Podmiot1K Podmiot1K { get; set; }

        /// <summary>
        /// Gets or Sets Podmiot2K
        /// </summary>
        [DataMember(Name = "Podmiot2K", EmitDefaultValue = false)]
        public List<Podmiot2K> Podmiot2K { get; set; }

        /// <summary>
        /// Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku
        /// </summary>
        /// <value>Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku</value>
        [DataMember(Name = "P_15ZK", EmitDefaultValue = false)]
        public double P15ZK { get; set; }

        /// <summary>
        /// Typ wykorzystywany do określenia ilości. Wartość numeryczna 22 znaki max, w tym 6 po przecinku
        /// </summary>
        /// <value>Typ wykorzystywany do określenia ilości. Wartość numeryczna 22 znaki max, w tym 6 po przecinku</value>
        [DataMember(Name = "KursWalutyZK", EmitDefaultValue = false)]
        public double KursWalutyZK { get; set; }

        /// <summary>
        /// Gets or Sets ZaliczkaCzesciowa
        /// </summary>
        [DataMember(Name = "ZaliczkaCzesciowa", EmitDefaultValue = false)]
        public List<ZaliczkaCzesciowa> ZaliczkaCzesciowa { get; set; }

        /// <summary>
        /// Pojedyncze pole wyboru
        /// </summary>
        /// <value>Pojedyncze pole wyboru</value>
        [DataMember(Name = "FP", EmitDefaultValue = false)]
        public int FP { get; set; }

        /// <summary>
        /// Pojedyncze pole wyboru
        /// </summary>
        /// <value>Pojedyncze pole wyboru</value>
        [DataMember(Name = "TP", EmitDefaultValue = false)]
        public int TP { get; set; }

        /// <summary>
        /// Gets or Sets DodatkowyOpis
        /// </summary>
        [DataMember(Name = "DodatkowyOpis", EmitDefaultValue = false)]
        public List<TKluczWartosc> DodatkowyOpis { get; set; }

        /// <summary>
        /// Gets or Sets FakturaZaliczkowa
        /// </summary>
        [DataMember(Name = "FakturaZaliczkowa", EmitDefaultValue = false)]
        public List<FakturaZaliczkowa> FakturaZaliczkowa { get; set; }

        /// <summary>
        /// Pojedyncze pole wyboru
        /// </summary>
        /// <value>Pojedyncze pole wyboru</value>
        [DataMember(Name = "ZwrotAkcyzy", EmitDefaultValue = false)]
        public int ZwrotAkcyzy { get; set; }

        /// <summary>
        /// Gets or Sets FaWiersz
        /// </summary>
        [DataMember(Name = "FaWiersz", EmitDefaultValue = false)]
        public List<FaWiersz> FaWiersz { get; set; }

        /// <summary>
        /// Gets or Sets Rozliczenie
        /// </summary>
        [DataMember(Name = "Rozliczenie", EmitDefaultValue = false)]
        public Rozliczenie Rozliczenie { get; set; }

        /// <summary>
        /// Gets or Sets Platnosc
        /// </summary>
        [DataMember(Name = "Platnosc", EmitDefaultValue = false)]
        public Platnosc Platnosc { get; set; }

        /// <summary>
        /// Gets or Sets WarunkiTransakcji
        /// </summary>
        [DataMember(Name = "WarunkiTransakcji", EmitDefaultValue = false)]
        public WarunkiTransakcji WarunkiTransakcji { get; set; }

        /// <summary>
        /// Gets or Sets Zamowienie
        /// </summary>
        [DataMember(Name = "Zamowienie", EmitDefaultValue = false)]
        public Zamowienie Zamowienie { get; set; }

        /// <summary>
        /// Data zdarzenia w okresie od 2006-01-01 do 2050-01-01
        /// </summary>
        /// <value>Data zdarzenia w okresie od 2006-01-01 do 2050-01-01</value>
        [DataMember(Name = "P_6", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime P6 { get; set; }

        /// <summary>
        /// Data zdarzenia w okresie od 2006-01-01 do 2050-01-01
        /// </summary>
        /// <value>Data zdarzenia w okresie od 2006-01-01 do 2050-01-01</value>
        [DataMember(Name = "P_6_Od", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime P6Od { get; set; }

        /// <summary>
        /// Data zdarzenia w okresie od 2006-01-01 do 2050-01-01
        /// </summary>
        /// <value>Data zdarzenia w okresie od 2006-01-01 do 2050-01-01</value>
        [DataMember(Name = "P_6_Do", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime P6Do { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Fa {\n");
            sb.Append("  KodWaluty: ").Append(KodWaluty).Append("\n");
            sb.Append("  P1: ").Append(P1).Append("\n");
            sb.Append("  P1M: ").Append(P1M).Append("\n");
            sb.Append("  P2: ").Append(P2).Append("\n");
            sb.Append("  WZ: ").Append(WZ).Append("\n");
            sb.Append("  P131: ").Append(P131).Append("\n");
            sb.Append("  P141: ").Append(P141).Append("\n");
            sb.Append("  P141W: ").Append(P141W).Append("\n");
            sb.Append("  P132: ").Append(P132).Append("\n");
            sb.Append("  P142: ").Append(P142).Append("\n");
            sb.Append("  P142W: ").Append(P142W).Append("\n");
            sb.Append("  P133: ").Append(P133).Append("\n");
            sb.Append("  P143: ").Append(P143).Append("\n");
            sb.Append("  P143W: ").Append(P143W).Append("\n");
            sb.Append("  P134: ").Append(P134).Append("\n");
            sb.Append("  P144: ").Append(P144).Append("\n");
            sb.Append("  P144W: ").Append(P144W).Append("\n");
            sb.Append("  P135: ").Append(P135).Append("\n");
            sb.Append("  P145: ").Append(P145).Append("\n");
            sb.Append("  P1361: ").Append(P1361).Append("\n");
            sb.Append("  P1362: ").Append(P1362).Append("\n");
            sb.Append("  P1363: ").Append(P1363).Append("\n");
            sb.Append("  P137: ").Append(P137).Append("\n");
            sb.Append("  P138: ").Append(P138).Append("\n");
            sb.Append("  P139: ").Append(P139).Append("\n");
            sb.Append("  P1310: ").Append(P1310).Append("\n");
            sb.Append("  P1311: ").Append(P1311).Append("\n");
            sb.Append("  P15: ").Append(P15).Append("\n");
            sb.Append("  KursWalutyZ: ").Append(KursWalutyZ).Append("\n");
            sb.Append("  Adnotacje: ").Append(Adnotacje).Append("\n");
            sb.Append("  RodzajFaktury: ").Append(RodzajFaktury).Append("\n");
            sb.Append("  PrzyczynaKorekty: ").Append(PrzyczynaKorekty).Append("\n");
            sb.Append("  TypKorekty: ").Append(TypKorekty).Append("\n");
            sb.Append("  DaneFaKorygowanej: ").Append(DaneFaKorygowanej).Append("\n");
            sb.Append("  OkresFaKorygowanej: ").Append(OkresFaKorygowanej).Append("\n");
            sb.Append("  NrFaKorygowany: ").Append(NrFaKorygowany).Append("\n");
            sb.Append("  Podmiot1K: ").Append(Podmiot1K).Append("\n");
            sb.Append("  Podmiot2K: ").Append(Podmiot2K).Append("\n");
            sb.Append("  P15ZK: ").Append(P15ZK).Append("\n");
            sb.Append("  KursWalutyZK: ").Append(KursWalutyZK).Append("\n");
            sb.Append("  ZaliczkaCzesciowa: ").Append(ZaliczkaCzesciowa).Append("\n");
            sb.Append("  FP: ").Append(FP).Append("\n");
            sb.Append("  TP: ").Append(TP).Append("\n");
            sb.Append("  DodatkowyOpis: ").Append(DodatkowyOpis).Append("\n");
            sb.Append("  FakturaZaliczkowa: ").Append(FakturaZaliczkowa).Append("\n");
            sb.Append("  ZwrotAkcyzy: ").Append(ZwrotAkcyzy).Append("\n");
            sb.Append("  FaWiersz: ").Append(FaWiersz).Append("\n");
            sb.Append("  Rozliczenie: ").Append(Rozliczenie).Append("\n");
            sb.Append("  Platnosc: ").Append(Platnosc).Append("\n");
            sb.Append("  WarunkiTransakcji: ").Append(WarunkiTransakcji).Append("\n");
            sb.Append("  Zamowienie: ").Append(Zamowienie).Append("\n");
            sb.Append("  P6: ").Append(P6).Append("\n");
            sb.Append("  P6Od: ").Append(P6Od).Append("\n");
            sb.Append("  P6Do: ").Append(P6Do).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
