/*
 * KSeF API
 *
 * API do systemu KSeF
 *
 * The version of the OpenAPI document: 1.2.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = KsefApi.Client.FileParameter;
using OpenAPIDateConverter = KsefApi.Client.OpenAPIDateConverter;

namespace KsefApi.Model
{
    /// <summary>
    /// Zamówienie lub umowa, o których mowa w art. 106f ust. 1 pkt 4 ustawy (dla faktur zaliczkowych) w walucie, w której wystawiono fakturę zaliczkową. W przypadku faktury korygującej fakturę zaliczkową należy wykazać różnice wynikające z korekty poszczególnych pozycji zamówienia lub umowy lub dane pozycji korygowanych w stanie przed korektą i po korekcie jako osobne wiersze, jeśli korekta dotyczy wartości zamówienia lub umowy. W przypadku faktur korygujących faktury zaliczkowe, jeśli korekta nie dotyczy wartości zamówienia lub umowy i jednocześnie zmienia wysokość podstawy opodatkowania lub podatku, należy wprowadzić zapis wg stanu przed korektą i zapis w stanie po korekcie w celu potwierdzenia braku zmiany wartości danej pozycji
    /// </summary>
    [DataContract(Name = "Zamowienie")]
    public partial class Zamowienie
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Zamowienie" /> class.
        /// </summary>
        /// <param name="wartoscZamowienia">Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku.</param>
        /// <param name="zamowienieWiersz">zamowienieWiersz.</param>
        public Zamowienie(double wartoscZamowienia = default, List<ZamowienieWiersz> zamowienieWiersz = default)
        {
            this.WartoscZamowienia = wartoscZamowienia;
            this.ZamowienieWiersz = zamowienieWiersz;
        }

        /// <summary>
        /// Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku
        /// </summary>
        /// <value>Wartość numeryczna 18 znaków max, w tym 2 znaki po przecinku</value>
        [DataMember(Name = "WartoscZamowienia", EmitDefaultValue = false)]
        public double WartoscZamowienia { get; set; }

        /// <summary>
        /// Gets or Sets ZamowienieWiersz
        /// </summary>
        [DataMember(Name = "ZamowienieWiersz", EmitDefaultValue = false)]
        public List<ZamowienieWiersz> ZamowienieWiersz { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Zamowienie {\n");
            sb.Append("  WartoscZamowienia: ").Append(WartoscZamowienia).Append("\n");
            sb.Append("  ZamowienieWiersz: ").Append(ZamowienieWiersz).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
