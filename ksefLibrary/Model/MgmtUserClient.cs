/*
 * KSeF API
 *
 * API do systemu KSeF
 *
 * The version of the OpenAPI document: 1.2.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = KsefApi.Client.FileParameter;
using OpenAPIDateConverter = KsefApi.Client.OpenAPIDateConverter;

namespace KsefApi.Model
{
    /// <summary>
    /// MgmtUserClient
    /// </summary>
    [DataContract(Name = "MgmtUserClient")]
    public partial class MgmtUserClient
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MgmtUserClient" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MgmtUserClient() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MgmtUserClient" /> class.
        /// </summary>
        /// <param name="nip">nip (required).</param>
        /// <param name="firm">firm (required).</param>
        /// <param name="address">address.</param>
        /// <param name="billingEmail">billingEmail.</param>
        /// <param name="billingInfo">billingInfo.</param>
        /// <param name="statusId">statusId.</param>
        /// <param name="keys">keys (required).</param>
        public MgmtUserClient(string nip = default, string firm = default, string address = default, string billingEmail = default, string billingInfo = default, int statusId = default, List<MgmtUserClientKey> keys = default)
        {
            // to ensure "nip" is required (not null)
            if (nip == null)
            {
                throw new ArgumentNullException("nip is a required property for MgmtUserClient and cannot be null");
            }
            this.Nip = nip;
            // to ensure "firm" is required (not null)
            if (firm == null)
            {
                throw new ArgumentNullException("firm is a required property for MgmtUserClient and cannot be null");
            }
            this.Firm = firm;
            // to ensure "keys" is required (not null)
            if (keys == null)
            {
                throw new ArgumentNullException("keys is a required property for MgmtUserClient and cannot be null");
            }
            this.Keys = keys;
            this.Address = address;
            this.BillingEmail = billingEmail;
            this.BillingInfo = billingInfo;
            this.StatusId = statusId;
        }

        /// <summary>
        /// Gets or Sets Nip
        /// </summary>
        [DataMember(Name = "nip", IsRequired = true, EmitDefaultValue = true)]
        public string Nip { get; set; }

        /// <summary>
        /// Gets or Sets Firm
        /// </summary>
        [DataMember(Name = "firm", IsRequired = true, EmitDefaultValue = true)]
        public string Firm { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets BillingEmail
        /// </summary>
        [DataMember(Name = "billingEmail", EmitDefaultValue = false)]
        public string BillingEmail { get; set; }

        /// <summary>
        /// Gets or Sets BillingInfo
        /// </summary>
        [DataMember(Name = "billingInfo", EmitDefaultValue = false)]
        public string BillingInfo { get; set; }

        /// <summary>
        /// Gets or Sets StatusId
        /// </summary>
        [DataMember(Name = "statusId", EmitDefaultValue = false)]
        public int StatusId { get; set; }

        /// <summary>
        /// Gets or Sets Keys
        /// </summary>
        [DataMember(Name = "keys", IsRequired = true, EmitDefaultValue = true)]
        public List<MgmtUserClientKey> Keys { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MgmtUserClient {\n");
            sb.Append("  Nip: ").Append(Nip).Append("\n");
            sb.Append("  Firm: ").Append(Firm).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  BillingEmail: ").Append(BillingEmail).Append("\n");
            sb.Append("  BillingInfo: ").Append(BillingInfo).Append("\n");
            sb.Append("  StatusId: ").Append(StatusId).Append("\n");
            sb.Append("  Keys: ").Append(Keys).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
